generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Community {
  id               String                  @id @default(uuid())
  name             String                  @unique
  description      String?
  address          String?
  createdAt        DateTime                @default(now())
  updatedAt        DateTime                @updatedAt
  announcements    Announcements[]
  bookings         Booking[]
  events           Event[]
  actualFacilities Facility[]              @relation("CommunityFacilities")
  facilityConfigs  FacilityConfiguration[] @relation("FacilityConfigs")
  payments         Payments[]
  tickets          Ticket[]
  users            User[]
  visitors         Visitor[]  
}

model User {
  id          String     @id @default(uuid())
  name        String
  email       String     @unique
  password    String
  role        UserRole   @default(RESIDENT)
  status      UserStatus @default(PENDING)
  communityId String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  bookings    Booking[]
  comments    Comment[]
  payments    Payments[]
  rsvp        RSVP[]
  tickets     Ticket[]
  community   Community  @relation(fields: [communityId], references: [id], onDelete: Cascade)
  visitors    Visitor[]  @relation("UserVisitors")  // <-- addeeeeed
}

model FacilityConfiguration {
  id             String       @id @default(uuid())
  facilityType   FacilityType
  enabled        Boolean      @default(false)
  quantity       Int          @default(1)
  maxCapacity    Int          @default(10)
  isPaid         Boolean      @default(false)
  price          Float?       @default(0)
  priceType      PriceType?   @default(PER_HOUR)
  operatingHours String?      @default("09:00-21:00")
  rules          String?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  communityId    String
  facilities     Facility[]
  community      Community    @relation("FacilityConfigs", fields: [communityId], references: [id], onDelete: Cascade)

  @@unique([communityId, facilityType])
}

model Facility {
  id              String                 @id @default(uuid())
  name            String
  open            String
  close           String
  slotMins        Int
  capacity        Int                    @default(10)
  communityId     String
  configurationId String?
  createdAt       DateTime               @default(now())
  facilityType    FacilityType
  updatedAt       DateTime               @updatedAt
  bookings        Booking[]
  community       Community              @relation("CommunityFacilities", fields: [communityId], references: [id], onDelete: Cascade)
  configuration   FacilityConfiguration? @relation(fields: [configurationId], references: [id])
}

model Ticket {
  id          String       @id @default(uuid())
  title       String
  category    String
  description String?
  status      TicketStatus @default(SUBMITTED)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  userId      String
  communityId String
  comments    Comment[]
  history     History[]
  images      Image[]
  community   Community    @relation(fields: [communityId], references: [id], onDelete: Cascade)
  user        User         @relation(fields: [userId], references: [id])
}

model Comment {
  id        String   @id @default(uuid())
  text      String
  createdAt DateTime @default(now())
  userId    String
  ticketId  String
  ticket    Ticket   @relation(fields: [ticketId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model Image {
  id        String   @id @default(uuid())
  url       String
  createdAt DateTime @default(now())
  ticketId  String
  ticket    Ticket   @relation(fields: [ticketId], references: [id])
}

model History {
  id       String       @id @default(uuid())
  status   TicketStatus
  note     String?
  at       DateTime     @default(now())
  ticketId String
  ticket   Ticket       @relation(fields: [ticketId], references: [id])
}

model Booking {
  id          String        @id @default(uuid())
  startsAt    DateTime
  endsAt      DateTime
  note        String?
  status      BookingStatus @default(CONFIRMED)
  userId      String
  facilityId  String
  peopleCount Int           @default(1)
  communityId String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  community   Community     @relation(fields: [communityId], references: [id], onDelete: Cascade)
  facility    Facility      @relation(fields: [facilityId], references: [id])
  user        User          @relation(fields: [userId], references: [id])

  @@index([facilityId, startsAt])
  @@index([communityId, startsAt])
}

model Event {
  id          String    @id @default(uuid())
  title       String
  description String?
  location    String
  startsAt    DateTime
  endsAt      DateTime
  communityId String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  community   Community @relation(fields: [communityId], references: [id], onDelete: Cascade)
  rsvps       RSVP[]
}

model RSVP {
  id      String @id @default(uuid())
  userId  String
  eventId String
  event   Event  @relation(fields: [eventId], references: [id])
  user    User   @relation(fields: [userId], references: [id])

  @@unique([userId, eventId])
}

model Announcements {
  id          String    @id @default(uuid())
  title       String
  content     String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  userId      String
  communityId String
  community   Community @relation(fields: [communityId], references: [id], onDelete: Cascade)
}

model Payments {
  id          String    @id @default(uuid())
  amount      Float
  method      String
  createdAt   DateTime  @default(now())
  userId      String
  communityId String
  updatedAt   DateTime  @updatedAt
  status      String
  community   Community @relation(fields: [communityId], references: [id], onDelete: Cascade)
  user        User      @relation(fields: [userId], references: [id])
}

enum UserRole {
  ADMIN
  RESIDENT
  GATEKEEPER
  STAFF
}

enum UserStatus {
  PENDING
  APPROVED
  REJECTED
}

enum TicketStatus {
  SUBMITTED
  IN_PROGRESS
  RESOLVED
  CANCELLED
}

enum BookingStatus {
  CONFIRMED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
}

enum FacilityType {
  SWIMMING_POOL
  GYMNASIUM
  TENNIS_COURT
  BASKETBALL_COURT
  PLAYGROUND
  CLUBHOUSE
  PARTY_HALL
  CONFERENCE_ROOM
  LIBRARY
  GARDEN
  JOGGING_TRACK
}

enum PriceType {
  PER_HOUR
  PER_DAY
  PER_WEEK
  PER_MONTH
  ONE_TIME
}

enum VisitorType {
  GUEST
  DELIVERY
  CAB_AUTO
}

enum VisitorStatus {
  PENDING
  APPROVED
  CHECKED_IN
  CHECKED_OUT
  CANCELLED
}

model Visitor {
  id           String        @id @default(uuid())
  name         String
  email        String?
  type         VisitorType
  expectedAt   DateTime
  purpose      String?
  vehicle      String?
  notes        String?
  status       VisitorStatus @default(PENDING)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  residentId   String
  communityId  String
  resident     User          @relation("UserVisitors", fields: [residentId], references: [id], onDelete: Cascade)
  community    Community     @relation(fields: [communityId], references: [id], onDelete: Cascade)

  @@index([communityId, expectedAt])
}
